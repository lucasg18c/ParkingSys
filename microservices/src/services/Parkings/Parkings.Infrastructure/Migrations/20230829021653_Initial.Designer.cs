// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Parkings.Infrastructure;

#nullable disable

namespace Parkings.Infrastructure.Migrations
{
    [DbContext(typeof(ParkingsDbContext))]
    [Migration("20230829021653_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Parkings.Domain.Models.ParkingLot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("ParkingLots");
                });

            modelBuilder.Entity("Parkings.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParkingLotId")
                        .HasColumnType("text");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Parkings.Domain.Models.Owner", b =>
                {
                    b.HasBaseType("Parkings.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Owner");
                });

            modelBuilder.Entity("Parkings.Domain.Models.Valet", b =>
                {
                    b.HasBaseType("Parkings.Domain.Models.User");

                    b.HasIndex("ParkingLotId");

                    b.HasDiscriminator().HasValue("Valet");
                });

            modelBuilder.Entity("Parkings.Domain.Models.ParkingLot", b =>
                {
                    b.HasOne("Parkings.Domain.Models.Owner", "Owner")
                        .WithOne("ParkingLot")
                        .HasForeignKey("Parkings.Domain.Models.ParkingLot", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Parkings.Domain.Models.Valet", b =>
                {
                    b.HasOne("Parkings.Domain.Models.ParkingLot", "ParkingLot")
                        .WithMany("Valets")
                        .HasForeignKey("ParkingLotId");

                    b.Navigation("ParkingLot");
                });

            modelBuilder.Entity("Parkings.Domain.Models.ParkingLot", b =>
                {
                    b.Navigation("Valets");
                });

            modelBuilder.Entity("Parkings.Domain.Models.Owner", b =>
                {
                    b.Navigation("ParkingLot");
                });
#pragma warning restore 612, 618
        }
    }
}
